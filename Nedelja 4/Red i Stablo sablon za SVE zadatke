#include <iostream>

using namespace std;

// Definition for a binary tree node.
struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {}
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
};

// Node structure for the Queue
struct QueueNode {
    TreeNode* treeNode;
    QueueNode* next;
    QueueNode(TreeNode* t) : treeNode(t), next(nullptr) {}
};

// Custom Queue class
class Queue {
    QueueNode* frontNode;
    QueueNode* backNode;

public:
    Queue() : frontNode(nullptr), backNode(nullptr) {}

    ~Queue() {
        while (!empty()) {
            pop();
        }
    }

    // Adds a TreeNode* to the back of the queue
    void push(TreeNode* t) {
        QueueNode* newNode = new QueueNode(t);
        if (backNode) {
            backNode->next = newNode;
        } else {
            frontNode = newNode;
        }
        backNode = newNode;
    }

    // Removes the front TreeNode* from the queue
    void pop() {
        if (empty()) return;
        QueueNode* temp = frontNode;
        frontNode = frontNode->next;
        if (!frontNode) backNode = nullptr; // If the queue becomes empty
        delete temp;
    }

    // Returns the front TreeNode* in the queue
    TreeNode* front() const {
        if (empty()) return nullptr;
        return frontNode->treeNode;
    }

    // Checks if the queue is empty
    bool empty() const {
        return frontNode == nullptr;
    }
};

TreeNode* insertLevelOrder() {
    int val;
    cout << "Enter root value or -1 for NULL: ";
    cin >> val;
    if (val == -1) {
        return nullptr;
    }

    TreeNode* root = new TreeNode(val);
    Queue q;
    q.push(root);

    while (!q.empty()) {
        TreeNode* node = q.front();
        q.pop();

        cout << "Enter left child of " << node->val << " (or -1 for NULL): ";
        cin >> val;
        if (val != -1) {
            node->left = new TreeNode(val);
            q.push(node->left);
        }

        cout << "Enter right child of " << node->val << " (or -1 for NULL): ";
        cin >> val;
        if (val != -1) {
            node->right = new TreeNode(val);
            q.push(node->right);
        }
    }
    return root;
}

void deleteTree(TreeNode* node) {
    if (node == nullptr) {
        return;
    }
    deleteTree(node->left);
    deleteTree(node->right);
    delete node;
}

class Solution {
    // Implement your solution methods here
};

void printTree(TreeNode* node, int depth = 0) {
    if (node == nullptr) {
        return;
    }

    // Print the current node with indentation for the level
    cout << string(depth * 2, ' ') << node->val << endl;

    // Recursively print the left and right subtrees with increased depth
    printTree(node->left, depth + 1);
    printTree(node->right, depth + 1);
}

int main() {
    cout << "Construct a binary tree by entering node values:" << endl;
    TreeNode* root = insertLevelOrder();

    Solution sol;
    // Assuming you add a solution method in Solution, you could call it here:
    // e.g., int result = sol.minCameraCover(root);
    printTree(root);
    // Clean up allocated memory
    deleteTree(root);

    return 0;
}
