/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* head) {
    ListNode* prev = nullptr;
    ListNode* current = head;
    while(current != nullptr) {
        ListNode* next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }
    return prev;
}

bool isPalindrome(ListNode* head) {
    if(head == nullptr || head->next == nullptr) {
        return true;
    }

    ListNode* slowPtr = head;
    ListNode* fastPtr = head;
    ListNode* prevSlow = nullptr;

    // Find middle of the list
    while(fastPtr != nullptr && fastPtr->next != nullptr) {
        prevSlow = slowPtr;
        slowPtr = slowPtr->next;
        fastPtr = fastPtr->next->next;
    }
        if (prevSlow != nullptr) {
            prevSlow->next = nullptr;
        }
    // Split the list
    if (fastPtr != nullptr) {  // odd-length list, skip the middle node
            slowPtr = slowPtr->next;
        }
    prevSlow->next = nullptr;
    ListNode* secondList = reverse(slowPtr);

    // Compare the two halves
    ListNode* firstList = head;
    bool isPalin = true;
    while(secondList != nullptr) {
        if(firstList->val != secondList->val) {
            isPalin = false;
            break;
        }
        firstList = firstList->next;
        secondList = secondList->next;
    }

    return isPalin;
}
    };
