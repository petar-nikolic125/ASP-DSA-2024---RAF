#include <iostream>


typedef struct Element {
    int data;
    Element* next;
} Element;

Element* addElement(int data) {
    Element* newElement = new Element;
    newElement -> data = data;
    newElement -> next = nullptr;
    return newElement;
}
Element* addOnEnd(Element* list, Element* newElement) {
    if(list == nullptr) {
        return newElement;
    }
    Element* temp = list;
    while(temp -> next != nullptr) {
        temp = temp -> next;
    }
    temp -> next = newElement;
    return list;
}

Element* deleteAllRepeating(Element* head) {
    if(head == nullptr) {
        return head;
    }
        Element* dummy = new Element;
        dummy -> next = head;
        Element* prev = dummy;
        Element* current = head;
        while(current != nullptr) {
            bool isDuplicate = false;
            while(current -> next != nullptr && current -> data == current -> next -> data) {
                    isDuplicate = true;
                Element* zrtva = current;
                current = current -> next;
                delete(zrtva);
            }
            if(isDuplicate) {
                Element* zrtva = current;
                current = current -> next;
                delete(zrtva);
                prev -> next = current;
            }
            else {
                current = current -> next;
                prev = prev -> next;
            }
        }
    return dummy -> next;

}



void writeList(Element* list) {
    while(list != nullptr) {
        std::cout << list -> data << " -> ";
        list = list -> next;
    }
    std::cout << "null" << "\n";
}

void deletelist(Element* list) {
    while (list != nullptr) {
        Element *next = list->next;
        delete(list);
        list = next;
    }
    std::cout << "list deleted\n";
}

using namespace std;

// made changessss
int main() {
    Element* list = nullptr;
    int data;
    while(true) {
        cout << "insert node: \n";
        cin >> data;
        if(data == 0) {
            break;
        }
        list = addOnEnd(list, addElement(data));
    }
    writeList(list);
    list = deleteAllRepeating(list);
    writeList(list);
    deletelist(list);
    return 0;
}
