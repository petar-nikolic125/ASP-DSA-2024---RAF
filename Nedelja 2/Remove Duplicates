#include <iostream>


typedef struct Element {
    int data;
    Element* next;
} Element;

Element* addElement(int data) {
    Element* newElement = new Element;
    newElement -> data = data;
    newElement -> next = nullptr;
    return newElement;
}
Element* addOnEnd(Element* list, Element* newElement) {
    if(list == nullptr) {
        return newElement;
    }
    Element* temp = list;
    while(temp -> next != nullptr) {
        temp = temp -> next;
    }
    temp -> next = newElement;
    return list;
}

Element* removeDuplicates(Element* head) {
    if(head == nullptr) {
        return head;
    }
    Element* list = head;
    while(list != nullptr && list -> next != nullptr) {
       if(list -> data == list->next -> data) {
           Element* duplicate = list -> next;
           list->next = duplicate -> next;
           delete(duplicate);
       }
        else {
            list = list -> next;
        }
    }
    return head;
}

void writeList(Element* list) {
    while(list != nullptr) {
        std::cout << list -> data << " -> ";
        list = list -> next;
    }
    std::cout << "null" << "\n";
}

void deletelist(Element* list) {
    while (list != nullptr) {
        Element *next = list->next;
        delete(list);
        list = next;
    }
    std::cout << "list deleted\n";
}

using namespace std;

// made changessss
int main() {
    Element* list = nullptr;
    int data;
    while(true) {
        cout << "insert node: \n";
        cin >> data;
        if(data == 0) {
            break;
        }
        list = addOnEnd(list, addElement(data));
    }
    writeList(list);
    list = removeDuplicates(list);
    writeList(list);
    deletelist(list);
    return 0;
}
