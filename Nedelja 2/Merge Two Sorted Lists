#include <iostream>


typedef struct Element {
    int data;
    Element* next;
} Element;

Element* addElement(int data) {
    Element* newElement = new Element;
    newElement -> data = data;
    newElement -> next = nullptr;
    return newElement;
}
Element* addOnEnd(Element* list, Element* newElement) {
    if(list == nullptr) {
        return newElement;
    }
    Element* temp = list;
    while(temp -> next != nullptr) {
        temp = temp -> next;
    }
    temp -> next = newElement;
    return list;
}


Element* reverse(Element* head) {
    Element* prev = nullptr;
    Element* current = head;
    while(current != nullptr) {
        Element* next = current -> next;
        current -> next = prev;
        prev = current;
        current = next;
        }
    return prev;
    }


int listCount(Element* head) {
    int count = 0;
    while(head != nullptr) {
        count += 1;
        head = head -> next;
    }
    return count;
}

void writeList(Element* list) {
    while(list != nullptr) {
        std::cout << list -> data << " -> ";
        list = list -> next;
    }
    std::cout << "null" << "\n";
}

void deletelist(Element* list) {
    while (list != nullptr) {
        Element *next = list->next;
        delete(list);
        list = next;
    }
    std::cout << "list deleted\n";
}

Element* swapInPairs(Element* head) {
    if(head == nullptr || head -> next == nullptr) {
        return head;
    }
    Element* curr = head;
    Element* dummy = new Element;
    Element* prev = dummy;
    while(curr != nullptr && curr -> next != nullptr) {
        prev -> next = curr -> next;
        curr -> next = prev -> next -> next;
        prev -> next -> next = curr;

        prev = curr;
        curr = curr -> next;
    }
    Element* result = dummy -> next;
    delete(dummy);
    return  result;
}
Element* mergeTwoLists(Element* first, Element* second) {
        Element* dummy = new Element;
        Element* temp = dummy;
        if(first == nullptr){
            return second;
        }
        if(second == nullptr) {
            return first;
        }
        while(first != nullptr && second != nullptr) {
            if(first -> data < second -> data) {
                temp -> next = first;
                first = first -> next;
            }
            else {
                temp -> next = second;
                second = second -> next;
            }
            temp = temp -> next;
        }
    if(first) temp -> next = first;
    if(second) temp -> next = second;
    Element* result = dummy -> next;
    delete(dummy);
    return result;
}

using namespace std;

// made changessss
int main() {
    Element* list1 = nullptr;
    Element* list2 = nullptr;
    int data;
    cout << "Upisi nulu za kraj unosa!\n";
    cout << "Unesi prvu listu: \n";
    while(true) {
        cout << "insert node: \n";
        cin >> data;
        if(data == 0) {
            break;
        }
        list1 = addOnEnd(list1, addElement(data));
    }
    cout << "Unesi drugu listu: \n";
    while(true) {
        cout << "insert node: \n";
        cin >> data;
        if(data == 0) {
            break;
        }
        list2 = addOnEnd(list2, addElement(data));
    }
    Element* listMerged = mergeTwoLists(list1, list2);
    writeList(listMerged);
    deletelist(listMerged);
    return 0;
}
