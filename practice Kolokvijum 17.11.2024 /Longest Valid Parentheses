#include <iostream>

using namespace std;

class Stack {
    int *elementPointer;
    int maxElements;
    int topIndex;
public:
    explicit Stack(int x) : maxElements(x), topIndex(-1) {
        elementPointer = new int[maxElements];
    }

    void push(int x) {
        if(topIndex < maxElements - 1) {
            elementPointer[++topIndex] = x;
        }
        else cout << "stack overflow!\n";
    }

    void pop() {
        if(topIndex > -1) {
            topIndex --;
        }
        else cout << "cannot pop an empty stack!\n";
    }

    int top() {
        if(topIndex > -1) {
            return elementPointer[topIndex];
        }
        return -1;
    }

bool empty()const {
        if(topIndex == -1) return true;
        return false;
    }

    ~Stack() {
        delete[] elementPointer;
        }
};

int longestValidParentheses(string s) {

        Stack stack(s.size());
        stack.push(-1); // our base
        int length = 0;

    for(int i = 0; i < s.size(); i++) {
        if(s[i] == '(') {
            stack.push(i);
        }
        else if(s[i] == ')') {
            stack.pop();
            if(stack.empty()) {
                stack.push(i);
            }
            length = max(length, i - stack.top());
        }
    }
return length;
}

int main() {
        string s;
    cout << "enter parentheses\n";
    cin >> s;
    cout << longestValidParentheses(s);
}
