#include <iostream>

using namespace std;

struct TreeNode {
    int value;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int x) : value(x), left(nullptr), right(nullptr) {}
};
struct QueueNode {
    TreeNode* treeNode;
    QueueNode *next;
    QueueNode (TreeNode* t) : treeNode(t), next(nullptr) {}
};

class Queue {
    QueueNode* frontNode;
    QueueNode* backNode;

public:
    Queue(): frontNode(nullptr), backNode(nullptr){}

        void push(TreeNode* t) {
        QueueNode* newNode = new QueueNode(t);
        if(backNode) {
            backNode -> next = newNode;
        } else {
            frontNode = newNode;
        }
        backNode = newNode;
    }

    void pop() {
        if(empty()) return;
        QueueNode* temp = frontNode;
        frontNode = frontNode -> next;
        if(!frontNode) backNode = nullptr;
        delete temp;
    }

    bool empty() const {
        return frontNode == nullptr;
    }
    TreeNode* front() const {
        return empty() ? nullptr : frontNode -> treeNode;
    }
    ~Queue() {
        while(!empty()) {
            pop();
        }
    }
};

class Tree {
private:
    TreeNode* root;
public:
    Tree() : root(nullptr) {}

    void insertLevelOrder() {
        int val;
        cout << "enter root value or -1 for null\n";
        cin >> val;
        if(val == -1) return;
        root = new TreeNode(val);
        Queue q;
        q.push(root);
        while(!q.empty()) {
            TreeNode* node = q.front();
            q.pop();
            cout << "enter left child of " << node -> value << " orr -1 for null\n";
            cin >> val;
            if(val != -1) {
                node -> left = new TreeNode(val);
                q.push(node -> left);
            }
            cout << "enter right child of " << node -> value << " orr -1 for null\n";
            cin >> val;
            if(val != -1) {
                node -> right = new TreeNode(val);
                q.push(node -> right);
            }
        }
    }
    void deleteTree(TreeNode* node) {
        if(node == nullptr) return;
        deleteTree(node -> left);
        deleteTree(node -> right);
        delete node;
    }

TreeNode* getRoot() {
    if(root != nullptr) {
        return root;
    }
}
    ~Tree() {
        deleteTree(root);
    }
};

int equalPathAndChildren(TreeNode* node, int dist) {
        if(node == nullptr) return 0;

    int childrenSum = 0;

    if(node -> left) childrenSum += node -> left -> value;
    if(node -> right) childrenSum += node -> right -> value;

    int count = 0;
    if(dist == childrenSum) {
        count += 1;
    }

    count += equalPathAndChildren(node -> left, dist + node->value);
    count += equalPathAndChildren(node -> right, dist + node->value);

    return count;
}

int main(){
    Tree tree;
    tree.insertLevelOrder();
    cout << equalPathAndChildren(tree.getRoot(), 0);
    return 0;
}
